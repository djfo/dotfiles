if has("win32")
  set encoding=utf-8
  scriptencoding utf-8
endif

set nocompatible
syntax on
filetype plugin on

set tabstop=8
set expandtab
set softtabstop=2
set shiftwidth=2
set shiftround

set autoindent
set backspace=indent,eol,start
set smarttab

set number
set relativenumber
"set hidden
"set splitright
"set gdefault

set autoread

set wrap
set linebreak
set showbreak=â€¦
set ignorecase
set smartcase

set formatoptions=tcqj

set showcmd

set nobackup
set writebackup

set path+=**
set ruler
set wildmenu

set foldmethod=marker

set cryptmethod=blowfish2
set dictionary+=/usr/share/dict/words

set clipboard=autoselectplus

set undofile
set undodir=~/.vim-undodir

set background=dark

if has("gui_running")
  set guioptions=ailLr
  set mouse=a

  if has("osx")
    set guifont=Monaco:h14
    set noantialias
    set background=light
  elseif has("win32")
    set guifont=Hack:h12
  else
    set guifont=Ttyp0\ 14
  endif

  colorscheme one
else
  set mouse=
endif

packadd! matchit

" search {{{
set incsearch
set hlsearch
" hide highlighted search
nnoremap <silent> <C-l> :<C-u>nohlsearch<CR><C-l>
" }}}

" move line up/down using C-k and C-j
map <c-k> kddpk
map <c-j> ddp

" open/close fold using <space>
nnoremap <space> za

function! ToggleList()
  exec('set list!')
  if &colorcolumn==""
    exec('set colorcolumn=+1')
  else
    exec('set colorcolumn=""')
  endif
endfunction

function! ToggleCursorColumnLine()
  if &cursorcolumn == 0
    exec('set cursorcolumn')
    exec('set cursorline')
  else
    exec('set nocursorcolumn')
    exec('set nocursorline')
  endif
endfunction

nnoremap <F2> :set relativenumber!<CR>:set number!<CR>
nnoremap <F3> :call ToggleList()<CR>
nnoremap <F4> :UndotreeToggle<CR>
nnoremap <F5> :syntax sync fromstart<CR>
nnoremap <F6> :call ToggleCursorColumnLine()<CR>
" rotate tab size
nnoremap <silent> <F7> :let &ts=(&ts*2 > 8 ? 2 : &ts*2)<cr>:echo "tabstop:" . &ts<cr>

let mapleader=","
"let mapleader="\<Space>"
noremap <Leader>hey :echo "Hey, ho, let's go!"<cr>

" sort -f -t \> -k 2
map <Leader>1 1gt<CR>
map <Leader>2 2gt<CR>
map <Leader>3 3gt<CR>
map <Leader>4 4gt<CR>
map <Leader>5 5gt<CR>
map <Leader>6 6gt<CR>
map <Leader>7 7gt<CR>
map <Leader>8 8gt<CR>
map <Leader>9 9gt<CR>
map <Leader>dg :diffget<CR>
map <Leader>do :diffoff<CR>
map <Leader>dp :diffput<CR>
map <Leader>dt :diffthis<CR>
map <Leader>du :diffupdate<CR>
map <Leader>gb :Gblame<CR>
map <Leader>gd :Gdiff<CR>
map <Leader>gs :Gstatus<CR>
map <Leader>hc :GhcModCheck<CR>
map <Leader>hC :GhcModTypeClear<CR>
map <Leader>hg :GhcModSigCodegen<CR>
map <Leader>hi :GhcModInfo<CR>
map <Leader>hl :GhcModLint<CR>
vmap <Leader>hs !stylish-haskell<CR>
map <Leader>hS :GhcModSplitFunCase<CR>
map <Leader>ht :GhcModType<CR>
map <Leader>sw /\s\+$<CR>
vmap <Leader>t :Tabularize/
map <Leader>x :Lexplore<CR>

" next/previous tab using <C-n> and <C-p>
map <C-n> :tabnext<CR>
map <C-p> :tabprevious<CR>

" Emacs-like beginning and end of file
imap <c-e> <c-o>$
imap <c-a> <c-o>^

" asy {{{
augroup filetypedetect
au BufNewFile,BufRead *.asy     setf asy
au BufNewFile,BufRead *.expect  setf expect
augroup END
" }}}

" MyStatusLine() {{{
function! MyStatusLine()
    let statusline = ""
    " Filename (F -> full, f -> relative)
    let statusline .= "%f"
    " Buffer flags
    let statusline .= "%( %h%1*%m%*%r%w%) "
    " File format and type
    let statusline .= "(%{&ff}%(\/%Y%))"
    " Left/right separator
    let statusline .= "%="
    " Line & column
    let statusline .= "(%l,%c%V) "
    " Character under cursor (decimal)
    let statusline .= "%03.3b "
    " Character under cursor (hexadecimal)
    let statusline .= "0x%02.2B "
    " File progress
    let statusline .= "| %P/%L"
    return statusline
endfunction
"set statusline=%<%f\ 0x%02B\ %h%m%r%=%-14.(%l,%c%V%)\ %P
set statusline=%!MyStatusLine()
set laststatus=2
" }}}

" zip files in disguise {{{
au BufReadCmd *.jar,*.xpi,*.ipa call zip#Browse(expand("<amatch>"))
" }}}

" Break up inserts into smaller undo-chunks
inoremap . .<c-g>u
inoremap ? ?<c-g>u
inoremap ! !<c-g>u
inoremap , ,<c-g>u

" :h :DiffOrig
command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
  \ | wincmd p | diffthis

au BufNewFile,BufRead *.podspec,Podfile setf ruby
autocmd BufNewFile,BufReadPost *.tex set filetype=tex
autocmd BufNewFile,BufRead *.plt setf gnuplot

" Toggle GUI cruft {{{
" https://stackoverflow.com/a/13525844
function ToggleGUICruft()
  if stridx(&guioptions, 'm') < 0
    exec('set guioptions+=mT')
  else
    exec('set guioptions-=mT')
  endif
endfunction
" }}}

" Toggle background using F8 {{{
function! ToggleBackground()
  if &background=='dark'
    exec('set background=light')
  else
    exec('set background=dark')
  endif
endfunction
nmap <F8> :call ToggleBackground()<cr>
" }}}

augroup numbertoggle
  autocmd!
  autocmd BufEnter,FocusGained,WinEnter * if &nu | set rnu   | endif
  autocmd BufLeave,FocusLost,WinLeave   * if &nu | set nornu | endif
augroup END

" use `:WipeReg<CR>` to clear all registers
command! WipeReg for i in range(34,122) | silent! call setreg(nr2char(i), []) | endfor

dig \|- 8866

autocmd BufNewFile,BufRead /tmp/mutt* set filetype=mail tw=60

if v:version >= 800 && has('patch1206')
  autocmd CmdlineEnter * set digraph
  autocmd CmdlineLeave * set nodigraph
endif

" vim -b : edit binary using xxd-format!
augroup Binary
  au!
  au BufReadPre  *.bin let &bin=1
  au BufReadPost *.bin if &bin | %!xxd
  au BufReadPost *.bin set ft=xxd | endif
  au BufWritePre *.bin if &bin | %!xxd -r
  au BufWritePre *.bin endif
  au BufWritePost *.bin if &bin | %!xxd
  au BufWritePost *.bin set nomod | endif
augroup END

" blackboard bold
digraph CC 8450
digraph KK 120130
digraph NN 8469
digraph QQ 8474
digraph RR 8477

let g:ctrlp_map = ''
nnoremap <leader>e :CtrlP<cr>

let g:markdown_fold_override_foldtext=0
